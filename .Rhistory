by = c("Station", "SampleSize")],
Station ~ SampleSize, value = "V1")
allFiles = merge(merge(data.frame(Station = unique(fileInfo$Station)),
data.frame(Pressure = c(100, 300, 850))),
data.frame(SampleSize = c(10, 20, 40)))
comp = merge.data.frame(allFiles, fileInfo, all = TRUE)
comp[is.na(comp$SimCnt),]
temp
infinitive = "abbassare"
url = sprintf("http://italian.about.com/library/verb/blverb_%s.htm",
infinitive)
verbList = html(url) %>%
html_nodes("tr") %>%
xml_text()
verbList
?html
verbList = html(url, encoding = "UTF-8") %>%
html_nodes("tr") %>%
xml_text()
verbList
if(length(verbList) == 0)
return(NULL)
cursor = 2
indicativo <- congiuntivo <- condizionale <- imperative <- infinito <-
participio <- gerundio <- c()
indicativo
while(TRUE){
new = verbList[cursor:(cursor+6)]
## If there's a newline character, skip to next tense
if(any(grepl("\n", new))){
cursor = cursor + 1
break
} else {
## If there's no newline character, append and continue adding
indicativo = c(indicativo, new)
cursor = cursor + 7
}
}
while(TRUE){
new = verbList[cursor:(cursor+6)]
## If there's a newline character, skip to next tense
if(any(grepl("\n", new))){
cursor = cursor + 1
break
} else {
## If there's no newline character, append and continue adding
congiuntivo = c(congiuntivo, new)
cursor = cursor + 7
}
}
## Condizionale
while(TRUE){
new = verbList[cursor:(cursor+6)]
## If there's a newline character, skip to next tense
if(any(grepl("\n", new))){
cursor = cursor + 1
break
} else {
## If there's no newline character, append and continue adding
condizionale = c(condizionale, new)
cursor = cursor + 7
## Must also force a break here, as conditional and imperative
## aren't separated in the html like they seem to be on the page
if(length(condizionale) == 14)
break
}
}
## Imperative
while(TRUE){
new = verbList[cursor:(cursor+6)]
## If there's a newline character, skip to next tense
if(any(grepl("\n", new))){
cursor = cursor + 1
break
} else {
## If there's no newline character, append and continue adding
imperative = c(imperative, new)
cursor = cursor + 7
}
}
## Infinito
## Adjust cursor for infinito
while(TRUE){
if(verbList[cursor] != "Presente")
cursor = cursor + 1
else
break
}
infinito = verbList[cursor + c(1, 3)]
cursor = cursor + 3
## Participio
while(TRUE){
if(verbList[cursor] != "Presente")
cursor = cursor + 1
else
break
}
participio = verbList[cursor + c(1, 3)]
cursor = cursor + 3
## Gerundio
while(TRUE){
if(verbList[cursor] != "Presente")
cursor = cursor + 1
else
break
}
gerundio = verbList[cursor + c(1, 3)]
## Extract appropriate structure, convert to data.frame
indicative = do.call("rbind",
tapply(X = indicativo,
INDEX = rep(1:(length(indicativo)/7), each = 7),
FUN = parseOneTense))
indicative
congiuntivo = do.call("rbind",
tapply(X = congiuntivo,
INDEX = rep(1:(length(congiuntivo)/7), each = 7),
FUN = parseOneTense))
congiuntivo
congiuntivo$tense = paste(congiuntivo$tense, "Congiuntivo")
condizionale = do.call("rbind",
tapply(X = condizionale,
INDEX = rep(1:(length(condizionale)/7), each = 7),
FUN = parseOneTense))
condizionale$tense = paste(condizionale$tense, "Condizionale")
## infinito, participio, e gerundio in una lista
infinito = data.frame(tense = "Infinito", person = NA,
elementList = infinito)
participio = data.frame(tense = "Participio", person = NA,
elementList = participio)
gerundio = data.frame(tense = "Gerundio", person = NA,
elementList = gerundio)
## Raggiungere tutto
out = rbind(indicative, congiuntivo, condizionale, infinito, participio, gerundio)
colnames(out) = c("tense", "person", "conjugation")
out
source('~/GitHub/Italian/getConjugations.R')
library(rvest)
library(stringr)
library(data.table)
setwd("~/GitHub/Italian/")
source("R/getConjugations.R")
source("parseOneTense.R")
source("R/getConjugationsEnglish.R")
source("parseOneTenseEnglish.R")
verbs = read.csv("verbs_both.csv", stringsAsFactors = FALSE)
verbs = unique.data.frame(verbs)
write.csv(verbs, file = "verbs_both.csv", row.names = FALSE)
verbMap = read.csv("tenseMap.csv", stringsAsFactors = FALSE)
englishDatabase = NULL
italianDatabase = NULL
for(i in 1:nrow(verbs)){
english = gsub("to ", "", verbs[i, 1])
if(grepl(" ", english))
ending = gsub("[a-zA-Z]* ", "", english)
else
ending = ""
english = gsub(" .*", "", english)
engConj = getConjugationsEnglish(english)
engConj$verb = verbs[i, 1]
engConj$conjugation = paste0(engConj$conjugation, ending)
englishDatabase = rbind(englishDatabase, engConj)
italian = verbs[i, 2]
if(grepl(" ", italian))
ending = gsub("[a-zA-Z]* ", "", italian)
else
ending = ""
italian = gsub(" .*", "", italian)
italConj = try(getConjugations(italian))
if(!is.null(italConj) & !is(italConj, "try-error")){
italConj$verb = verbs[i, 2]
italConj$conjugation = paste0(italConj$conjugation, ending)
italianDatabase = rbind(italianDatabase, italConj)
}
save(italianDatabase, englishDatabase, verbs, verbMap,
file = "verbData.RData")
cat("Added word", verbs[i, 1], ",", verbs[i, 2], "\n")
}
## Manually add uncertainty tenses
for(verb in unique(englishDatabase$verb)){
englishDatabase = rbind(englishDatabase, data.frame(
tense = "present conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), verb),
verb = verb))
participle = englishDatabase[englishDatabase$verb == verb &
englishDatabase$tense == "present perfect" &
englishDatabase$person == "I", "conjugation"]
participle = gsub("have ", "", participle)
englishDatabase = rbind(englishDatabase, data.frame(
tense = "past conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), participle),
verb = verb))
}
## Manually add conditional tenses
for(verb in unique(englishDatabase$verb)){
englishDatabase = rbind(englishDatabase, data.frame(
tense = "present conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), verb),
verb = verb))
participle = englishDatabase[englishDatabase$verb == verb &
englishDatabase$tense == "present perfect" &
englishDatabase$person == "I", "conjugation"]
participle = gsub("have ", "", participle)
englishDatabase = rbind(englishDatabase, data.frame(
tense = "past conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), participle),
verb = verb))
}
## Manually add congiuntivo tenses
subset = englishDatabase[englishDatabase$tense %in%
c("indicative", "preterite",
"present perfect", "past perfect"), ]
subset$tense = paste(subset$tense, "+ uncertainty")
subset$conjugation = paste(subset$conjugation, "(maybe)")
englishDatabase = rbind(englishDatabase, subset)
save(italianDatabase, englishDatabase, verbs, verbMap,
file = "verbData.RData")
load("verbData.RData")
verbMap$englishTense[which(!verbMap$englishTense %in% englishDatabase$tense)]
verbMap$italianTense[which(!verbMap$italianTense %in% italianDatabase$tense)]
## Now, let's join the datasets together for a final translation dataset
finalDatabase = englishDatabase
colnames(finalDatabase) = paste0(colnames(finalDatabase), "English")
finalDatabase = merge(finalDatabase, verbMap,
by.x = "tenseEnglish", by.y = "englishTense")
finalDatabase$personMatch = gsub("( |,|\\(|\\))", "", finalDatabase$personEnglish)
finalDatabase$italianPerson = sapply(as.character(finalDatabase$personMatch),
switch,
I = "io", you = "tu",
hesheit = "lui, lei, Lei",
we = "noi", youplural = "voi",
they = "loro, Loro")
finalDatabase$personMatch = NULL
finalDatabase = merge(finalDatabase, verbs,
by.x = "verbEnglish", by.y = "English")
finalDatabase = merge(finalDatabase, italianDatabase,
by.x = c("Italian", "italianTense", "italianPerson"),
by.y = c("verb", "tense", "person"))
finalDatabase = finalDatabase[, c("personEnglish", "tenseEnglish",
"verbEnglish", "conjugationEnglish",
"italianPerson", "italianTense",
"Italian", "conjugation")]
colnames(finalDatabase) = c("englishPerson", "englishTense", "englishVerb",
"englishConjugation", "italianPerson",
"italianTense", "italianVerb", "italianConjugation")
finalDatabase = data.table(finalDatabase)
save(finalDatabase, file = "finalVerbDatabase.RData")
finalDatabase
head(italianDatabase)
head(italianDatabase, 10)
head(italianDatabase, 100)
i = 1
italian = verbs[i, 2]
italian
ending = gsub("[a-zA-Z]* ", "", italian)
ending
ending = ""
italian = gsub(" .*", "", italian)
italian
italConj = try(getConjugations(italian))
italConj
source('~/GitHub/Italian/R/getConjugations.R')
italConj = try(getConjugations(italian))
italConj
if(!is.null(italConj) & !is(italConj, "try-error")){
italConj$verb = verbs[i, 2]
italConj$conjugation = paste0(italConj$conjugation, ending)
italianDatabase = rbind(italianDatabase, italConj)
}
library(rvest)
library(stringr)
library(data.table)
setwd("~/GitHub/Italian/")
source("R/getConjugations.R")
source("parseOneTense.R")
source("R/getConjugationsEnglish.R")
source("parseOneTenseEnglish.R")
verbs = read.csv("verbs_both.csv", stringsAsFactors = FALSE)
verbs = unique.data.frame(verbs)
write.csv(verbs, file = "verbs_both.csv", row.names = FALSE)
verbMap = read.csv("tenseMap.csv", stringsAsFactors = FALSE)
englishDatabase = NULL
italianDatabase = NULL
for(i in 1:nrow(verbs)){
english = gsub("to ", "", verbs[i, 1])
if(grepl(" ", english))
ending = gsub("[a-zA-Z]* ", "", english)
else
ending = ""
english = gsub(" .*", "", english)
engConj = getConjugationsEnglish(english)
engConj$verb = verbs[i, 1]
engConj$conjugation = paste0(engConj$conjugation, ending)
englishDatabase = rbind(englishDatabase, engConj)
italian = verbs[i, 2]
if(grepl(" ", italian))
ending = gsub("[a-zA-Z]* ", "", italian)
else
ending = ""
italian = gsub(" .*", "", italian)
italConj = try(getConjugations(italian))
if(!is.null(italConj) & !is(italConj, "try-error")){
italConj$verb = verbs[i, 2]
italConj$conjugation = paste0(italConj$conjugation, ending)
italianDatabase = rbind(italianDatabase, italConj)
}
save(italianDatabase, englishDatabase, verbs, verbMap,
file = "verbData.RData")
cat("Added word", verbs[i, 1], ",", verbs[i, 2], "\n")
}
## Manually add uncertainty tenses
for(verb in unique(englishDatabase$verb)){
englishDatabase = rbind(englishDatabase, data.frame(
tense = "present conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), verb),
verb = verb))
participle = englishDatabase[englishDatabase$verb == verb &
englishDatabase$tense == "present perfect" &
englishDatabase$person == "I", "conjugation"]
participle = gsub("have ", "", participle)
englishDatabase = rbind(englishDatabase, data.frame(
tense = "past conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), participle),
verb = verb))
}
## Manually add conditional tenses
for(verb in unique(englishDatabase$verb)){
englishDatabase = rbind(englishDatabase, data.frame(
tense = "present conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), verb),
verb = verb))
participle = englishDatabase[englishDatabase$verb == verb &
englishDatabase$tense == "present perfect" &
englishDatabase$person == "I", "conjugation"]
participle = gsub("have ", "", participle)
englishDatabase = rbind(englishDatabase, data.frame(
tense = "past conditional",
person = c("I", "you", "he, she, it", "we", "you (plural)", "they"),
conjugation = paste(c("could", "could", "could",
"could", "could", "could"), participle),
verb = verb))
}
## Manually add congiuntivo tenses
subset = englishDatabase[englishDatabase$tense %in%
c("indicative", "preterite",
"present perfect", "past perfect"), ]
subset$tense = paste(subset$tense, "+ uncertainty")
subset$conjugation = paste(subset$conjugation, "(maybe)")
englishDatabase = rbind(englishDatabase, subset)
save(italianDatabase, englishDatabase, verbs, verbMap,
file = "verbData.RData")
load("verbData.RData")
verbMap$englishTense[which(!verbMap$englishTense %in% englishDatabase$tense)]
verbMap$italianTense[which(!verbMap$italianTense %in% italianDatabase$tense)]
## Now, let's join the datasets together for a final translation dataset
finalDatabase = englishDatabase
colnames(finalDatabase) = paste0(colnames(finalDatabase), "English")
finalDatabase = merge(finalDatabase, verbMap,
by.x = "tenseEnglish", by.y = "englishTense")
finalDatabase$personMatch = gsub("( |,|\\(|\\))", "", finalDatabase$personEnglish)
finalDatabase$italianPerson = sapply(as.character(finalDatabase$personMatch),
switch,
I = "io", you = "tu",
hesheit = "lui, lei, Lei",
we = "noi", youplural = "voi",
they = "loro, Loro")
finalDatabase$personMatch = NULL
finalDatabase = merge(finalDatabase, verbs,
by.x = "verbEnglish", by.y = "English")
finalDatabase = merge(finalDatabase, italianDatabase,
by.x = c("Italian", "italianTense", "italianPerson"),
by.y = c("verb", "tense", "person"))
finalDatabase = finalDatabase[, c("personEnglish", "tenseEnglish",
"verbEnglish", "conjugationEnglish",
"italianPerson", "italianTense",
"Italian", "conjugation")]
colnames(finalDatabase) = c("englishPerson", "englishTense", "englishVerb",
"englishConjugation", "italianPerson",
"italianTense", "italianVerb", "italianConjugation")
finalDatabase = data.table(finalDatabase)
save(finalDatabase, file = "finalVerbDatabase.RData")
finalDatabase
currDir = getwd()
setwd("~/GitHub/Italian")
library(data.table)
files = dir("R", full.names = TRUE)
files = files[files != "R/runVocab.R"]
wrapVerbQuiz("Josh")
source('~/GitHub/Italian/R/wrapVerbQuiz.R')
wrapVerbQuiz("Josh")
wrapVerbQuiz("Josh")
name = startVerb() # defines verbFile
currDir = getwd()
setwd("~/GitHub/Italian")
library(data.table)
files = dir("R", full.names = TRUE)
files
files = files[files != "R/runVocab.R"]
for(file in files)
source(file)
name = startVerb() # defines verbFile
wrapVerbQuiz(name = name)
load("finalVerbDatabase.RData")
filter = verbFile[, active == 1 & (word %in% finalDatabase$italianVerb |
category != "verb")]
filter
verbFile[filter, successProbability := (successes + 0.5) / (attempts + 1)]
verbFile[filter, selectProbability :=
(1 - successProbability) / sum(1 - successProbability),
by = category]
verbFile[filter, cumulativeProbability := cumsum(selectProbability),
by = category]
verbFile
persn <<- verbFile[category == "person" & filter,
.(word, cumulativeProbability)]
tense <<- verbFile[category == "tense" & filter,
.(word, cumulativeProbability)]
verb <<- verbFile[category == "verb" & filter,
.(word, cumulativeProbability)]
persn
tense
verb
continue = TRUE
prompt = -1
verbFile = singleVerbQuiz(verbFile = verbFile)
source('~/GitHub/Italian/R/singleVerbQuiz.R')
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile = singleVerbQuiz(verbFile = verbFile)
random = runif(4)
personIndex = findInterval(random[1], persn$cumulativeProbability) + 1
tenseIndex  = findInterval(random[2], tense$cumulativeProbability) + 1
verbIndex   = findInterval(random[3], verb$cumulativeProbability)  + 1
giveItalian = ifelse(random[4] > .5, TRUE, FALSE)
personWord  = persn$word[personIndex]
tenseWord   = tense$word[tenseIndex]
verbWord    = verb$word[verbIndex]
personWord
tenseWord
verbWord
subset = finalDatabase[italianTense == tenseWord &
italianPerson == personWord &
italianVerb == verbWord, ]
subset
source('~/GitHub/Italian/R/singleVerbQuiz.R')
verbFile = singleVerbQuiz(verbFile = verbFile)
tense = "Passato Prossimo"
personWord = "lui/lei/Lei"
verbWord = "usare"
tenseWord = "Passato Prossimo"
subset = finalDatabase[italianTense == tenseWord &
italianPerson == personWord &
italianVerb == verbWord, ]
subset
finalDatabase[, .N, by = italianPerson]
persn
source('~/GitHub/Italian/R/singleVerbQuiz.R')
verbFile = singleVerbQuiz(verbFile = verbFile)
tense
persn
tense <<- verbFile[category == "tense" & filter,
.(word, cumulativeProbability)]
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile = singleVerbQuiz(verbFile = verbFile)
verbFile = singleVerbQuiz(verbFile = verbFile)
finalDatabase[, .N, italianTense]
head(italianDatabase)
table(italianDatabase$tense)
read.csv(paste0(name,"Verb.csv"), stringsAsFactors = FALSE)
verbFile = fread(paste0(name,"Verb.csv"), stringsAsFactors = FALSE)
verbFile
as.integer
verbFile[, successes := as.integer(successes)]
verbFile
source('~/GitHub/Italian/R/wrapVerbQuiz.R')
library(data.table)
files = dir("~/Professional Files/Mines/Research/Wind QC/Results/Simulation_20150223/",
full.names = TRUE, pattern = ".RData")
files = gsub(".*Simulations_", "", files)
fileInfo = do.call("rbind", strsplit(files, "_"))
fileInfo = data.table(fileInfo)
fileInfo[, V1 := as.numeric(V1)]
setnames(fileInfo, paste0("V", 1:5), c("SimCnt", "Machine", "Station",
"Pressure", "SampleSize"))
fileInfo[, SampleSize := gsub("\\.RData", "", SampleSize)]
reshape::cast(fileInfo[, length(unique(SampleSize)),
by = c("Station", "Pressure")],
Station ~ Pressure, value = "V1")
reshape::cast(fileInfo[, length(unique(Pressure)),
by = c("Station", "SampleSize")],
Station ~ SampleSize, value = "V1")
allFiles = merge(merge(data.frame(Station = unique(fileInfo$Station)),
data.frame(Pressure = c(100, 300, 850))),
data.frame(SampleSize = c(10, 20, 40)))
comp = merge.data.frame(allFiles, fileInfo, all = TRUE)
comp[is.na(comp$SimCnt),]
