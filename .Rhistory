for(file in dir("~/GitHub/MCLE/Robust-Skew-t/robustST/R/", full.names = TRUE))
source(file)
y = rnorm(100)
x = matrix(1, nrow = 100, ncol = 1)
family = "ST"
method = "constrOptim"
w = rep(1, nrow(x))
pValue = 0.01
start = NULL
sn:::dplist2optpar
robustSTOnceK(rnorm(500))
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/getStartingEstimate.R')
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
edit(sn:::dplist2optpar)
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/dplist2optpar.R')
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/robustST_once_k.R')
robustSTOnceK(rnorm(500))
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/dplist2optpar.R')
robustSTOnceK(rnorm(500))
sn:::pd.solve
??pd.solve
mnormt::pd.solve
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/dplist2optpar.R')
??pd.solve
robustSTOnceK(rnorm(500))
dp$nu
sn:::st.cp2dp
param = dplist2optpar(dp)
dp = getStartingEstimate(y = y, family = family, w = w)
dp
param = dplist2optpar(dp)
param
dp = getStartingEstimate(y = y, family = family, w = w)
param = dplist2optpar(dp)
param
y = rnorm(500)
dp = getStartingEstimate(y = y, family = family, w = w)
dp
x
rm(x)
dp = getStartingEstimate(y = y, family = family, w = w)
dp
x
w
w = rep(1, NROW(y)
)
dp = getStartingEstimate(y = y, family = family, w = w)
dp
param = dplist2optpar(dp)
param
dplist2optpar
param = dplist2optpar(dp)
param = dplist2optpar(dp)
param
dp = dp
beta <- dp[[1]]
Omega <- dp[[2]]
alpha <- dp[[3]]
beta
Omega
alpha
d <- length(alpha)
d
is.null(dp$nu)
nu <-
dp$nu
nu
eta <- alpha/sqrt(diag(Omega))
Oinv <- if (is.null(Omega.inv))
mnormt::pd.solve(Omega)
Omega.inv = NULL
Oinv <- if (is.null(Omega.inv))
mnormt::pd.solve(Omega)
Oinv
is.null(Oinv)
upper <- chol(Oinv)
D <- diag(upper)
upper
A <- upper/D
D <- D^2
d > 1
param <-
c(beta, -log(D)/2, eta)
!is.null(dp$nu)
if (!is.null(dp$nu))
param <- c(param, log(dp$nu))
param
param <- as.numeric(param)
param
beta
Omega
alpha
is(alpha)
alpha[1]
d <- length(alpha)
nu <- if (is.null(dp$nu))
NULL
nu
is.null(dp$nu)
nu <-
dp$nu
eta <- alpha/sqrt(diag(Omega))
Oinv <- if (is.null(Omega.inv))
mnormt::pd.solve(Omega)
upper <- chol(Oinv)
D <- diag(upper)
A <- upper/D
D <- D^2
param <-
c(beta, -log(D)/2, eta)
param
-log(D)/2
beta
eta
diag(Omega)
Omega
is(Omega)
matrix(1)
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/getStartingEstimate.R')
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(500))
robustSTOnceK(rnorm(1000))
robustSTOnceK(rnorm(1000))
robustSTOnceK(rnorm(1000))
robustSTOnceK(rnorm(1000))
robustSTOnceK(rnorm(1000))
robustSTOnceK(rnorm(10000))
robustSTOnceK(rnorm(10000))
robustSTOnceK(rnorm(10000))
robustSTOnceK(rnorm(10000))
robustSTOnceK(rnorm(10000))
robustSTOnceK(rnorm(10000))
source("GitHub/Italian/R/runVocab.R")
library(rvest)
library(stringr)
library(data.table)
setwd("~/GitHub/Italian/")
source("R/getConjugations.R")
source("parseOneTense.R")
source("R/getConjugationsEnglish.R")
source("parseOneTenseEnglish.R")
verbs = read.csv("verbs_both.csv", stringsAsFactors = FALSE)
verbs = unique.data.frame(verbs)
write.csv(verbs, file = "verbs_both.csv", row.names = FALSE)
verbMap = read.csv("tenseMap.csv", stringsAsFactors = FALSE)
verbMap
source('~/GitHub/Italian/createVerbDatabase.R')
4.42*2.2
