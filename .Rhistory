imputationFlag = "I",
newMethodFlag = "e",
naFlag = "M",
maxdf = 5,
byKey = areaVar,
restrictWeights = TRUE,
maximumWeights = 0.7,
yieldFormula =
yieldDefaultFormula)
library(lme4)
rm(list = ls())
## load the library
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(faoswsProductionImputation)
library(data.table)
library(splines)
library(lme4)
areaVar = "geographicAreaM49"
yearVar = "timePointYears"
itemVar = "measuredItemCPC"
elementVar = "measuredElement"
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProduction/",
full.names = TRUE))
source(file)
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProductionImputation/",
full.names = TRUE))
source(file)
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsUtil_update/",
full.names = TRUE))
source(file)
R_SWS_SHARE_PATH = Sys.getenv("R_SWS_SHARE_PATH")
DEBUG_MODE = Sys.getenv("R_DEBUG_MODE")
## Get SWS Parameters
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
## baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
token = "a94b4c47-3d8c-4076-be7e-21297fca3d36"
)
## Function to get the yield formula triplets
getYieldFormula = function(itemCode){
itemData = GetCodeList(domain = "agriculture", dataset = "agriculture",
dimension = "measuredItemCPC", codes = itemCode)
uniqueItemTypes = unique(itemData$type)
condition =
paste0("WHERE item_type IN (",
paste(paste0("'", as.character(uniqueItemTypes), "'"),
collapse = ", "), ")")
yieldFormula =
GetTableData(schemaName = "ess",
tableName = "item_type_yield_elements",
whereClause = condition)
yieldFormula = merge.data.frame(itemData, yieldFormula,
by.x = "type", by.y = "item_type")
yieldFormula = yieldFormula[, c("code", "element_31", "element_41",
"element_51", "factor")]
yieldFormula = data.table(yieldFormula)
setnames(yieldFormula,
old = c("code", "element_31", "element_41",
"element_51", "factor"),
new = c(itemVar, "input", "productivity",
"output", "unitConversion")
)
yieldFormula
}
## Function to get all country keys
getAllCountryCode = function(dataContext){
countryTable =
GetCodeList(domain = slot(dataContext, "domain"),
dataset = slot(dataContext, "dataset"),
dimension = areaVar)
unique(countryTable[type == "country", code])
}
getImputationData = function(dataContext){
## Setups
formulaTuples =
getYieldFormula(slot(slot(dataContext,
"dimensions")$measuredItemCPC, "keys"))
## setting the prefix, also should be accessed by the API
prefixTuples =
data.table(
valuePrefix = "Value_measuredElement_",
flagObsPrefix = "flagObservationStatus_measuredElement_",
flagMethodPrefix = "flagMethod_measuredElement_"
)
allCountryCode = getAllCountryCode(dataContext)
selectedYears =
slot(slot(dataContext, "dimensions")$timePointYears,
"keys")
## Set 15 years as the default required number of years for
## imputation
if(length(selectedYears) < 15)
selectedYears =
as.character((max(as.numeric(selectedYears) - 14)):
max(as.numeric(selectedYears)))
## Create the new expanded keys
newKey = DatasetKey(
domain = slot(dataContext, "domain"),
dataset = slot(dataContext, "dataset"),
dimensions = list(
Dimension(name = areaVar,
keys = allCountryCode),
Dimension(name = elementVar,
keys = unique(unlist(formulaTuples[,
list(input, productivity, output)]))),
Dimension(name = itemVar,
keys = slot(slot(dataContext,
"dimensions")$measuredItemCPC, "keys")),
Dimension(name = yearVar,
keys = selectedYears)
)
)
## Pivot to vectorize yield computation
newPivot = c(
Pivoting(code = areaVar, ascending = TRUE),
Pivoting(code = itemVar, ascending = TRUE),
Pivoting(code = yearVar, ascending = FALSE),
Pivoting(code = elementVar, ascending = TRUE)
)
## Query the data
query = GetData(
key = newKey,
flags = TRUE,
normalized = FALSE,
pivoting = newPivot
)
## Convert time to numeric
query[, timePointYears := as.numeric(timePointYears)]
## Assign flags of "M" where data is missing
elements = grepl("Value_measuredElement", colnames(query))
elements = gsub("Value_measuredElement_", "", colnames(query)[elements])
for(element in elements)
query[is.na(get(paste0("Value_measuredElement_", element))),
c(paste0("flagObservationStatus_measuredElement_", element)) := "M"]
## Remove data where flag is missing
for(element in elements)
remove0M(data = query,
value = paste0("Value_measuredElement_", element),
flag = paste0("flagObservationStatus_measuredElement_", element))
list(query = query,
formulaTuples = formulaTuples,
prefixTuples = prefixTuples)
}
executeImputationModule = function(){
fullKey = swsContext.datasets[[1]]
subKey = fullKey
uniqueItem = fullKey@dimensions$measuredItemCPC@keys
for(singleItem in uniqueItem){
subKey@dimensions$measuredItemCPC@keys = singleItem
print(paste0("Imputation for item: ", singleItem))
impute = try({
datasets = getImputationData(subKey)
## This is a temporary hack until the API issue is
## resolved
## datasets$query =
##     as.data.table(lapply(datasets$query, FUN = NULLtoNA))
with(datasets, {
## NOTE (Michael): The yield should have been
##                 calculated a priori to the
##                 imputation modeul.
## Set the names
assign("productionValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("productionObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("productionMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("areaHarvestedValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("areaHarvestedObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("areaHarvestedMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("yieldValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
assign("yieldObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
assign("yieldMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
## Recompute the yield
computeYield(productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
areaHarvestedValue =
areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
yieldValue = yieldValue,
yieldObservationFlag =
yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
newMethodFlag = "i",
flagTable = faoswsFlagTable,
data = query,
unitConversion =
formulaTuples$unitConversion)
## Impute the dataset
yieldDefaultFormula =
paste0(yieldValue, " ~ -1 + (1 + bs(timePointYears, df = 2, degree = 1)|geographicAreaM49)")
imputed = imputeProductionDomain(data = query,
productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
productionMethodFlag = productionMethodFlag,
areaHarvestedValue = areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
areaHarvestedMethodFlag =
areaHarvestedMethodFlag,
yieldValue = yieldValue,
yieldObservationFlag = yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
yearValue = yearVar,
flagTable = faoswsFlagTable,
removePriorImputation = TRUE,
removeConflictValues = TRUE,
imputedFlag = "E",
imputationFlag = "I",
newMethodFlag = "e",
naFlag = "M",
maxdf = 5,
byKey = areaVar,
restrictWeights = TRUE,
maximumWeights = 0.7,
yieldFormula =
yieldDefaultFormula)
#                 ## Validate data: not necessary since saveProductionData does this
#                 valid = faoswsUtil::removeInvalidDates(data = imputed)
## Save back to database
saveProductionData(imputed)
}
)
}
)
if(inherits(impute, "try-error")){
print("Imputation Module Failed")
} else {
print("Imputation Module Executed Successfully")
}
}
}
fullKey = swsContext.datasets[[1]]
subKey = fullKey
uniqueItem = fullKey@dimensions$measuredItemCPC@keys
singleItem
singleItem = uniqueItem[1]
singleItem
subKey@dimensions$measuredItemCPC@keys = singleItem
print(paste0("Imputation for item: ", singleItem))
impute = try({
datasets = getImputationData(subKey)
attach(datasets)
assign("productionValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("productionObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("productionMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$output),
envir = .GlobalEnv)
assign("areaHarvestedValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("areaHarvestedObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("areaHarvestedMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$input),
envir = .GlobalEnv)
assign("yieldValue",
paste0(prefixTuples$valuePrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
assign("yieldObservationFlag",
paste0(prefixTuples$flagObsPrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
assign("yieldMethodFlag",
paste0(prefixTuples$flagMethodPrefix,
formulaTuples$productivity),
envir = .GlobalEnv)
computeYield(productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
areaHarvestedValue =
areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
yieldValue = yieldValue,
yieldObservationFlag =
yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
newMethodFlag = "i",
flagTable = faoswsFlagTable,
data = query,
unitConversion =
formulaTuples$unitConversion)
yieldDefaultFormula =
paste0(yieldValue, " ~ -1 + (1 + bs(timePointYears, df = 2, degree = 1)|geographicAreaM49)")
imputed = imputeProductionDomain(data = query,
productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
productionMethodFlag = productionMethodFlag,
areaHarvestedValue = areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
areaHarvestedMethodFlag =
areaHarvestedMethodFlag,
yieldValue = yieldValue,
yieldObservationFlag = yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
yearValue = yearVar,
flagTable = faoswsFlagTable,
removePriorImputation = TRUE,
removeConflictValues = TRUE,
imputedFlag = "E",
imputationFlag = "I",
newMethodFlag = "e",
naFlag = "M",
maxdf = 5,
byKey = areaVar,
restrictWeights = TRUE,
maximumWeights = 0.7,
yieldFormula =
yieldDefaultFormula)
source('~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProductionImputation/processProductionDomain.R')
imputed = imputeProductionDomain(data = query,
productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
productionMethodFlag = productionMethodFlag,
areaHarvestedValue = areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
areaHarvestedMethodFlag =
areaHarvestedMethodFlag,
yieldValue = yieldValue,
yieldObservationFlag = yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
yearValue = yearVar,
flagTable = faoswsFlagTable,
removePriorImputation = TRUE,
removeConflictValues = TRUE,
imputedFlag = "E",
imputationFlag = "I",
newMethodFlag = "e",
naFlag = "M",
maxdf = 5,
byKey = areaVar,
restrictWeights = TRUE,
maximumWeights = 0.7,
yieldFormula =
yieldDefaultFormula)
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProduction/",
full.names = TRUE))
source(file)
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProductionImputation/",
full.names = TRUE))
source(file)
for(file in dir("~/GitHub/sws_r_api/r_modules/production_imputation/faoswsUtil_update/",
full.names = TRUE))
source(file)
imputed = imputeProductionDomain(data = query,
productionValue = productionValue,
productionObservationFlag =
productionObservationFlag,
productionMethodFlag = productionMethodFlag,
areaHarvestedValue = areaHarvestedValue,
areaHarvestedObservationFlag =
areaHarvestedObservationFlag,
areaHarvestedMethodFlag =
areaHarvestedMethodFlag,
yieldValue = yieldValue,
yieldObservationFlag = yieldObservationFlag,
yieldMethodFlag = yieldMethodFlag,
yearValue = yearVar,
flagTable = faoswsFlagTable,
removePriorImputation = TRUE,
removeConflictValues = TRUE,
imputedFlag = "E",
imputationFlag = "I",
newMethodFlag = "e",
naFlag = "M",
maxdf = 5,
byKey = areaVar,
restrictWeights = TRUE,
maximumWeights = 0.7,
yieldFormula =
yieldDefaultFormula)
imputed[geographicAreaM49 == "4", ]
source('~/GitHub/sws_r_api/r_modules/production_imputation/faoswsProduction/saveProductionData.R')
temp = data.table(geographicAreaM49 = "4", measuredItemCPC = "01229",
timePointYears = 1989, Value_measuredElement_5312 = 2,
flagObservationStatus_measuredElement_5312 = "E",
flagMethod_measuredElement_5312 = "f",
Value_measuredElement_5421 = 2,
flagObservationStatus_measuredElement_5421 = "E",
flagMethod_measuredElement_5421 = "f",
Value_measuredElement_5510 = 0,
flagObservationStatus_measuredElement_5510 = "M",
flagMethod_measuredElement_5510 = "f")
SaveData
SaveData(domain = "agriculture", dataset = "agriculture", data = temp)
temp
SaveData(domain = "agriculture", dataset = "agriculture", data = temp,
normalized = FALSE)
temp = data.table(geographicAreaM49 = "4", measuredItemCPC = "01229",
timePointYears = 1989, Value_measuredElement_5312 = 2,
flagObservationStatus_measuredElement_5312 = "E",
flagMethod_measuredElement_5312 = "f",
Value_measuredElement_5421 = 2,
flagObservationStatus_measuredElement_5421 = "E",
flagMethod_measuredElement_5421 = "f",
Value_measuredElement_5510 = 0,
flagObservationStatus_measuredElement_5510 = "M",
flagMethod_measuredElement_5510 = "f",
dummy = 1)
temp
temp = data.table(geographicAreaM49 = "4", measuredItemCPC = "01229",
timePointYears = 1989, Value_measuredElement_5312 = 3,
flagObservationStatus_measuredElement_5312 = "E",
flagMethod_measuredElement_5312 = "f",
Value_measuredElement_5421 = 2,
flagObservationStatus_measuredElement_5421 = "E",
flagMethod_measuredElement_5421 = "f",
Value_measuredElement_5510 = 0,
flagObservationStatus_measuredElement_5510 = "M",
flagMethod_measuredElement_5510 = "f",
dummy = 1)
temp
SaveData(domain = "agriculture", dataset = "agriculture", data = temp,
normalized = FALSE)
SaveData
saveProductionData
data = temp
context = swsContext.datasets[[1]]
stopifnot(is(data, "data.table"))
stopifnot("geographicAreaM49" %in% colnames(data))
stopifnot(is(context, "DatasetKey"))
areaValidRange = GetCodeList(domain = slot(context, "domain"),
dataset = slot(context, "dataset"),
dimension = "geographicAreaM49")
areaValidRange
cleanDates = function(date){
date = lapply(date, function(x) ifelse(is.null(x), NA, x))
do.call("c", date)
}
areaValidRange[, startDate := cleanDates(startDate)]
areaValidRange[, endDate := cleanDates(endDate)]
setnames(areaValidRange, old = "code", new = "geographicAreaM49")
areaValidRange
areaValidRange
areaValidRange
data
stopifnot(is(data, "data.table"))
stopifnot("geographicAreaM49" %in% colnames(data))
stopifnot(is(context, "DatasetKey"))
areaValidRange = GetCodeList(domain = slot(context, "domain"),
dataset = slot(context, "dataset"),
dimension = "geographicAreaM49")
cleanDates = function(date){
date = lapply(date, function(x) ifelse(is.null(x), NA, x))
do.call("c", date)
}
areaValidRange[, startDate := cleanDates(startDate)]
areaValidRange[, endDate := cleanDates(endDate)]
setnames(areaValidRange, old = "code", new = "geographicAreaM49")
areaValidRange
data = merge(data, areaValidRange, by = "geographicAreaM49", all.x = TRUE)
data[, date := as.Date(paste0(data$timePointYears, "-01-01",
format = "%Y-%m-%d"))]
data = data[is.na(startDate) | date > startDate, ]
data = data[is.na(endDate) | date < endDate, ]
data[, c("startDate", "endDate", "date") := NULL]
data
areaHarvestedCode
data[, Value_measuredElement_5312 = 4]
data[, Value_measuredElement_5312 := 4]
faosws::SaveData(domain = "agriculture",
dataset = "agriculture",
data = data,
normalized = FALSE)
source("GitHub/Italian/R/runVocab.R")
source("GitHub/Italian/R/runVocab.R")
source("R/runVocab.R")
