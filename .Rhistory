summarize(paste(sampleSize, ":", maxCompleted, collapse = ","))
finishedSims %>%
group_by(server) %>%
summarize(paste0(sampleSize, ":", maxCompleted, collapse = ", "))
finishedSims %>%
group_by(server) %>%
summarize(out = paste0(sampleSize, ":", maxCompleted, collapse = ", "))
source("~/GitHub/Italian/runVocab.R")
library(data.table)
finishedSims = dir("Professional Files/Mines/Research/Wind QC/Results/Simulation_20150223/",
pattern = "\\.RData")
finishedSims = gsub("(Simulations_|\\.RData)", "", finishedSims)
finishedSims = strsplit(finishedSims, split = "_")
finishedSims = do.call("rbind", finishedSims)
finishedSims = data.table(finishedSims)
finishedSims
finishedSims[, V1 := as.numeric(V1)]
setnames(finishedSims, colnames(finishedSims), c("maxCompleted", "server",
"station", "pressure",
"sampleSize"))
finishedSims
finishedSims[, list(maxCompleted = max(maxCompleted)),
by = c(server, station, pressure, sampleSize)]
finishedSims[, list(maxCompleted = max(maxCompleted)),
by = c("server", "station", "pressure", "sampleSize")]
out = finishedSims[, list(maxCompleted = max(maxCompleted)),
by = c("server", "station", "pressure", "sampleSize")]
out
out[, paste0(sampleSize, ":", maxCompleted, collapse = ", "), by = "server"]
out[, paste0(as.character(sampleSize), ":", maxCompleted, collapse = ", "), by = "server"]
out[, paste0(as.character(sampleSize), ":", maxCompleted, collapse = ", "),
by = "server"]
library(rvest)
library(stringr)
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
infinitive = "go"
url = sprintf("http://conjugator.reverso.net/conjugation-english-verb-%s.html",
infinitive)
verbList = html(url) %>%
html_nodes("tr") %>%
xml_text()
verbList = sapply(verbList, gsub, pattern = "\r\n[[:space:]]*", replacement = " ")
names(verbList) = NULL
verbList
verbList = sapply(verbList, gsub, pattern = "\r\n[[:space:]]*", replacement = " ")
names(verbList) = NULL
indicativo = gsub("Preterite.*", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
preterite = gsub("(.*Preterite|Infinitive.*)", "", verbList[7])
preterite = parseOneTenseEnglish(preterite)
preterite
infinitivo = gsub("(.*Infinitive | Imperative.*)", "", verbList[7])
infinitivo
imperative = gsub(".*Imperative ", "", verbList[7])
imperative = gsub("let's.*", "", imperative)
imperative = data.frame(person = c("I", "you", "he, she, it", "we", ".", "they"),
elementList = c(".", imperative, imperative,
paste("Let's", imperative), imperative, imperative))
imperative
verbList
participle = gsub("(.*Present| Past.*)", "", verbList[18])
participle
verbList[18]
participle = gsub(".*Past", "", verbList[18])
participle
participle = gsub("(.*Past| )", "", verbList[18])
participle
verbList[19:34]
verbList
gsub("( Indicative Present continuous| Present perfect.*)", "", verbList[28])
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous = parseOneTenseEnglish(PresentContinuous)
PresentContinuous
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
charVec = PresentContinuous
charVec
stopifnot(is(charVec, "character"))
stopifnot(length(charVec) == 1)
I = str_extract(charVec, " I [a-zA-Z ]*you ")
I
verbList[28]
I = str_extract(charVec, "I [a-zA-Z ]*you ")
I
I = gsub("(I |you )", "", I)
I
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous = parseOneTenseEnglish(PresentContinuous)
PresentContinuous
verbList[28]
indicativo = gsub("Preterite.*", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
preterite = gsub("(.*Preterite|Infinitive.*)", "", verbList[7])
preterite = parseOneTenseEnglish(preterite)
preterite
preterite = gsub("(.*Preterite|Infinitive.*)", "", verbList[7])
preterite
I = str_extract(charVec, "I [a-zA-Z ]*you ")
I = gsub("(I |you )", "", I)
I
charVec
paste0("I ", I, "you")
charVec = gsub(paste0("I ", I, "you "), "", charVec)
charVec
you = str_extract(charVec, "[a-zA-Z ]*he/she/it")
you
you = gsub("he/she/it", "", you)
you
charVec
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
charVec
he = str_extract(charVec, "[a-zA-Z ]*we")
he
he = gsub("we", "", he)
he
charVec
charVec = gsub(paste0(he, "we "), "", charVec)
charVec
we = str_extract(charVec, "[a-zA-Z ]*you ")
we
we = gsub("you ", "", we)
we
charVec
charVec = gsub(paste0(we, "you "), "", charVec)
charVec
you2 = str_extract(charVec, "[a-zA-Z ]*they ")
you2
you2 = gsub("they ", "", you2)
you2
charVec
charVec = gsub(paste0(they, "they "), "", charVec)
charVec = gsub(paste0(you2, "they "), "", charVec)
charVec
they = charVec
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
indicativo = gsub("Preterite.*", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
indicativo = gsub("Preterite.*", "", verbList[7])
source('~/GitHub/Italian/getConjugationsEnglish.R', echo=TRUE)
indicativo
indicativo = gsub("(Indicative Present |Preterite.*)", "", verbList[7])
indicativo
indicativo = gsub("(Indicative Present |Preterite.*)", "", verbList[7])
indicativo
indicativo = gsub("( Indicative Present |Preterite.*)", "", verbList[7])
indicativo
indicativo = parseOneTenseEnglish(indicativo)
indicativo
preterite = gsub("(.*Preterite|Infinitive.*)", "", verbList[7])
preterite
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
preterite
preterite = parseOneTenseEnglish(preterite)
preterite
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
preterite
charVec = preterite
stopifnot(is(charVec, "character"))
stopifnot(length(charVec) == 1)
I = str_extract(charVec, "I [a-zA-Z ]*you ")
I = gsub("(I |you )", "", I)
charVec = gsub(paste0("I ", I, "you "), "", charVec)
charVec
you = str_extract(charVec, "[a-zA-Z ]*he/she/it")
you = gsub("he/she/it", "", you)
you
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
charVec
he = str_extract(charVec, "[a-zA-Z ]*we")
he
he = gsub("we .*", "", charVec)
he
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
preterite = parseOneTenseEnglish(preterite)
preterite
indicativo = gsub("( Indicative Present |Preterite.*)", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
charVec = preterite
charVec
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
charVec = preterite
charVec
I = gsub("(I |you .*)", "", charVec)
I
charVec = gsub(paste0("I ", I, "you "), "", charVec)
charVec
you = gsub("he/she/it .*", "", you)
you
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
he = gsub("we .*", "", charVec)
charVec = gsub(paste0(he, "we "), "", charVec)
we = gsub("you .*", "", we)
we
charVec = gsub(paste0(we, "you "), "", charVec)
you2 = gsub("they .*", "", you2)
you2
charVec = gsub(paste0(you2, "they "), "", charVec)
charVec
charVec = preterite
I = gsub("(I |you .*)", "", charVec)
charVec = gsub(paste0("I ", I, "you "), "", charVec)
you = gsub("he/she/it .*", "", you)
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
he = gsub("we .*", "", charVec)
charVec = gsub(paste0(he, "we "), "", charVec)
we = gsub("you .*", "", we)
charVec = gsub(paste0(we, "you "), "", charVec)
we
you2 = gsub("they .*", "", you2)
charVec = gsub(paste0(you2, "they "), "", charVec)
you2
they = gsub(" .*$", "", charVec)
they
charVec = preterite
I = gsub("(I |you .*)", "", charVec)
charVec = gsub(paste0("I ", I, "you "), "", charVec)
you = gsub("he/she/it .*", "", you)
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
he = gsub("we .*", "", charVec)
charVec = gsub(paste0(he, "we "), "", charVec)
we = gsub("you .*", "", we)
charVec = gsub(paste0(we, "you "), "", charVec)
you2 = gsub("they .*", "", you2)
you2
charVec
charVec = preterite
I = gsub("(I |you .*)", "", charVec)
charVec = gsub(paste0("I ", I, "you "), "", charVec)
you = gsub("he/she/it .*", "", you)
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
he = gsub("we .*", "", charVec)
charVec = gsub(paste0(he, "we "), "", charVec)
we = gsub("you .*", "", we)
we
charVec
we
charVec = preterite
I = gsub("(I |you .*)", "", charVec)
charVec = gsub(paste0("I ", I, "you "), "", charVec)
you = gsub("he/she/it .*", "", charVec)
charVec = gsub(paste0(you, "he/she/it "), "", charVec)
he = gsub("we .*", "", charVec)
charVec = gsub(paste0(he, "we "), "", charVec)
charVec
I
you
he
we = gsub("you .*", "", charVec)
charVec = gsub(paste0(we, "you "), "", charVec)
we
charVec
you2 = gsub("they .*", "", charVec)
charVec = gsub(paste0(you2, "they "), "", charVec)
you2
they = gsub(" .*$", "", charVec)
they
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
indicativo = gsub("( Indicative Present |Preterite.*)", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
preterite = parseOneTenseEnglish(preterite)
preterite
infinitivo = gsub("(.*Infinitive | Imperative.*)", "", verbList[7])
imperative = gsub(".*Imperative ", "", verbList[7])
imperative = gsub("let's.*", "", imperative)
imperative = data.frame(person = c("I", "you", "he, she, it", "we", ".", "they"),
elementList = c(".", imperative, imperative,
paste("Let's", imperative),
imperative, imperative))
participle = gsub("(.*Present| Past.*)", "", verbList[18])
participle = gsub("(.*Past| )", "", verbList[18])
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous = parseOneTenseEnglish(PresentContinuous)
PresentContinuous
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous
source('~/GitHub/Italian/parseOneTenseEnglish.R', echo=TRUE)
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous = parseOneTenseEnglish(PresentContinuous)
PresentContinuous
verbList[28]
PresentPerfect = gsub("(.* Present perfect| Future.*)",
"", verbList[28])
PresentPerfect
PresentPerfect = gsub("(.* Present perfectI| Future.*)",
"", verbList[28])
PresentPerfect
PresentPerfect = paste0("I", PresentPerfect)
PresentPerfect
PresentPerfect = parseOneTenseEnglish(PresentPerfect)
PresentPerfect
verbList[28]
PresentPerfect = gsub("(.* FutureI| Future perfect.*)",
"", verbList[28])
Future = gsub("(.* FutureI| Future perfect.*)",
"", verbList[28])
Future
Future = gsub("(.* FutureI| Future perfect.*)", "", verbList[28])
Future = paste0("I", Future)
Future = parseOneTenseEnglish(Future)
Future
verbList[28]
FuturePerfect = gsub("(.* Future perfectI| Past continuous.*)", "", verbList[28])
FuturePerfect
FuturePerfect = paste0("I", FuturePerfect)
FuturePerfect = parseOneTenseEnglish(FuturePerfect)
FuturePerfect
verbList[28]
PastContinuous = gsub("(.* Past continuousI| Past perfect.*)", "", verbList[28])
PastContinuous = paste0("I", PastContinuous)
PastContinuous
PastContinuous = parseOneTenseEnglish(PastContinuous)
PastContinuous
verbList[28]
url = sprintf("http://conjugator.reverso.net/conjugation-english-verb-%s.html",
infinitive)
verbList = html(url) %>%
html_nodes("tr") %>%
xml_text()
verbList = sapply(verbList, gsub, pattern = "\r\n[[:space:]]*", replacement = " ")
names(verbList) = NULL
indicativo = gsub("( Indicative Present |Preterite.*)", "", verbList[7])
indicativo = parseOneTenseEnglish(indicativo)
indicativo
preterite = gsub("(.*Preterite |Infinitive.*)", "", verbList[7])
preterite = parseOneTenseEnglish(preterite)
preterite
infinitivo = gsub("(.*Infinitive | Imperative.*)", "", verbList[7])
imperative = gsub(".*Imperative ", "", verbList[7])
imperative = gsub("let's.*", "", imperative)
imperative = data.frame(person = c("I", "you", "he, she, it", "we", ".", "they"),
elementList = c(".", imperative, imperative,
paste("Let's", imperative),
imperative, imperative))
imperative
participle = gsub("(.*Present| Past.*)", "", verbList[18])
participle = gsub("(.*Past| )", "", verbList[18])
participle
PresentContinuous = gsub("( Indicative Present continuous| Present perfect.*)",
"", verbList[28])
PresentContinuous = parseOneTenseEnglish(PresentContinuous)
PresentPerfect = gsub("(.* Present perfectI| Future.*)",
"", verbList[28])
PresentContinuous
PresentPerfect
PresentPerfect = paste0("I", PresentPerfect)
PresentPerfect = parseOneTenseEnglish(PresentPerfect)
PresentPerfect
Future = gsub("(.* FutureI| Future perfect.*)", "", verbList[28])
Future = paste0("I", Future)
Future = parseOneTenseEnglish(Future)
Future
FuturePerfect = gsub("(.* Future perfectI| Past continuous.*)", "", verbList[28])
FuturePerfect = paste0("I", FuturePerfect)
FuturePerfect = parseOneTenseEnglish(FuturePerfect)
FuturePerfect
PastContinuous = gsub("(.* Past continuousI| Past perfect.*)", "", verbList[28])
PastContinuous = paste0("I", PastContinuous)
PastContinuous = parseOneTenseEnglish(PastContinuous)
PastContinuous
PastPerfect = gsub("(.* Past perfectI| Future continuous.*)", "", verbList[28])
PastPerfect = paste0("I", PastPerfect)
PastPerfect = parseOneTenseEnglish(PastPerfect)
PastPerfect
FutureContinuous = gsub("(.* Future continuousI| Present perfect continuous.*)", "", verbList[28])
FutureContinuous = paste0("I", FutureContinuous)
FutureContinuous = parseOneTenseEnglish(FutureContinuous)
FutureContinuous
PresentPerfectContinuous = gsub("(.* Present perfect continuousI| Past perfect continuous.*)",
"", verbList[28])
PresentPerfectContinuous = paste0("I", PresentPerfectContinuous)
PresentPerfectContinuous = parseOneTenseEnglish(PresentPerfectContinuous)
PresentPerfectContinuous
PastPerfectContinuous = gsub("(.* Past perfect continuousI| Future perfect continuous.*)",
"", verbList[28])
PastPerfectContinuous = paste0("I", PastPerfectContinuous)
PastPerfectContinuous = parseOneTenseEnglish(PastPerfectContinuous)
PastPerfectContinuous
FuturePerfectContinuous = gsub(".* Future perfect continuousI", "", verbList[28])
FuturePerfectContinuous = paste0("I", FuturePerfectContinuous)
FuturePerfectContinuous = parseOneTenseEnglish(FuturePerfectContinuous)
FuturePerfectContinuous
source('~/GitHub/Italian/getConjugationsEnglish.R', echo=TRUE)
source('~/GitHub/Italian/getConjugationsEnglish.R', echo=TRUE)
getConjugationsEnglish("be")
indicative
indicative = indicativo
infinitive = infinitive
infinitive = infinitivo
infinitive
indicative
data.frame(tense = "indicative", indicative)
data.frame(tense = "preterite", preterite)
rbind(data.frame(tense = "indicative", indicative),
data.frame(tense = "preterite", preterite),
data.frame(tense = "imperative", imperative),
data.frame(tense = "present continuous", PresentContinuous),
data.frame(tense = "present perfect", PresentPerfect),
data.frame(tense = "future", Future),
data.frame(tense = "future perfect", FuturePerfect),
data.frame(tense = "past continuous", PastContinuous),
data.frame(tense = "past perfect", PastPerfect),
data.frame(tense = "future continuous", FutureContinuous),
data.frame(tense = "present perfect continuous", PresentPerfectContinuous),
data.frame(tense = "past perfect continuous", PastPerfectContinuous),
data.frame(tense = "future perfect continuous", FuturePerfectContinuous))
source('~/GitHub/Italian/getConjugationsEnglish.R', echo=TRUE)
source("~/GitHub/Italian/runVocab.R")
source("~/GitHub/Italian/runVocab.R")
source("~/Github/Italian/runvocab.R")
q()
source("~/GitHub/Italian/R/runVocab.R")
while(!"verbFile" %in% ls(".GlobalEnv"))
name = startVerb() # defines verbFile
verbFile
verbFile
verbFile
verbFile[, attempts := as.integer(attempts)]
verbFile[, successes := as.integer(successes)]
verbFile[, active := as.integer(active)]
filter = verbFile[, active == 1 & (word %in% finalDatabase$italianVerb |
category != "verb")]
load("~/GitHub/Italian/finalVerbDatabase.RData")
filter = verbFile[, active == 1 & (word %in% finalDatabase$italianVerb |
category != "verb")]
verbFile[filter, successProbability := (successes + 0.5) / (attempts + 1)]
verbFile[filter, selectProbability :=
(1 - successProbability) / sum(1 - successProbability),
by = category]
verbFile[filter, cumulativeProbability := cumsum(selectProbability),
by = category]
## persn instead of person to avoid global definition:
vocabFile
save(vocabFile, file = "Josh.csv", row.names = FALSE)
save(vocabFile, file = "Josh.csv", row.names = F)
FALSE
source("~/Github/Italian/runvocab.R")
source("~/Github/Italian/R/runvocab.R")
verbFile[, attempts := as.integer(attempts)]
verbFile[, successes := as.integer(successes)]
verbFile[, active := as.integer(active)]
load("~/GitHub/Italian/finalVerbDatabase.RData")
filter = verbFile[, active == 1 & (word %in% finalDatabase$italianVerb |
category != "verb")]
verbFile[filter, successProbability := (successes + 0.5) / (attempts + 1)]
verbFile[filter, selectProbability :=
(1 - successProbability) / sum(1 - successProbability),
by = category]
verbFile[filter, cumulativeProbability := cumsum(selectProbability),
by = category]
## persn instead of person to avoid global definition:
persn <<- verbFile[category == "person" & filter,
.(word, cumulativeProbability)]
tense <<- verbFile[category == "tense" & filter,
.(word, cumulativeProbability)]
verb <<- verbFile[category == "verb" & filter,
.(word, cumulativeProbability)]
continue = TRUE
prompt = -1
while(!prompt %in% 1:1000){
cat("What would you like to do?\n")
cat("(1) Quit\n")
cat("(2-1000) Continue quiz for 2-1000 words\n")
prompt = readline()
}
while(!prompt %in% 1:1000){
cat("What would you like to do?\n")
cat("(1) Quit\n")
cat("(2-1000) Continue quiz for 2-1000 words\n")
prompt = readline()
}
prompt = -1
while(!prompt %in% 1:1000){
cat("What would you like to do?\n")
cat("(1) Quit\n")
cat("(2-1000) Continue quiz for 2-1000 words\n")
prompt = readline()
}
if(prompt %in% 2:1000){
for(i in 1:prompt)
verbFile = singleVerbQuiz(verbFile = verbFile)
}
currDir = getwd()
setwd("~/GitHub/Italian")
library(data.table)
files = dir("R", full.names = TRUE)
files = files[files != "R/runVocab.R"]
files
for(file in files)
source(file)
singleVerbQuiz
files = dir("R", full.names = TRUE)
files = files[files != "R/runVocab.R"]
for(file in files)
source(file)
singleVerbQuiz
for(i in 1:prompt)
verbFile = singleVerbQuiz(verbFile = verbFile)
source('~/GitHub/Italian/R/singleVerbQuiz.R')
source('~/GitHub/Italian/R/runVocab.R')
